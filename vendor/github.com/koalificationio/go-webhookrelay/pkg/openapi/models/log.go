// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Log Webhook Log
//
// swagger:model Log
type Log struct {

	// body
	Body string `json:"body,omitempty"`

	// bucket id
	// Read Only: true
	BucketID string `json:"bucket_id,omitempty"`

	// created at
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// This field is inherited from the bucket, if set - request/response body will not be set
	Ephemeral bool `json:"ephemeral,omitempty"`

	// headers
	Headers Headers `json:"headers,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// input id
	// Read Only: true
	InputID string `json:"input_id,omitempty"`

	// When internal output receives webhook, it forwards it to any connected agent (relay CLI, Docker agent or WebSocket connection)
	Internal bool `json:"internal,omitempty"`

	// method
	Method string `json:"method,omitempty"`

	// output id
	// Read Only: true
	OutputID string `json:"output_id,omitempty"`

	// raw query for example request to http://example.com?foo=bar is foo=bar
	RawQuery string `json:"raw_query,omitempty"`

	// response body
	ResponseBody string `json:"response_body,omitempty"`

	// response headers
	ResponseHeaders Headers `json:"response_headers,omitempty"`

	// Retries taken so far
	Retries int64 `json:"retries,omitempty"`

	// Request status, example values 'preparing', 'sent', 'failed', 'stalled', 'received', 'rejected'
	Status string `json:"status,omitempty"`

	// status code
	StatusCode int64 `json:"status_code,omitempty"`

	// updated at
	// Read Only: true
	UpdatedAt int64 `json:"updated_at,omitempty"`
}

// Validate validates this log
func (m *Log) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Log) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	if err := m.Headers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("headers")
		}
		return err
	}

	return nil
}

func (m *Log) validateResponseHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.ResponseHeaders) { // not required
		return nil
	}

	if err := m.ResponseHeaders.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_headers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Log) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Log) UnmarshalBinary(b []byte) error {
	var res Log
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
