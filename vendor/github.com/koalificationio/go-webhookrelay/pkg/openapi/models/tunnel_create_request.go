// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TunnelCreateRequest Tunnel Create Request
// swagger:model TunnelCreateRequest
type TunnelCreateRequest struct {

	// auth
	Auth *TunnelAuth `json:"auth,omitempty"`

	// crypto
	Crypto string `json:"crypto,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// destination
	// Required: true
	Destination *string `json:"destination"`

	// group
	Group string `json:"group,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// subdomain
	Subdomain string `json:"subdomain,omitempty"`
}

// Validate validates this tunnel create request
func (m *TunnelCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelCreateRequest) validateAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.Auth) { // not required
		return nil
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *TunnelCreateRequest) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TunnelCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelCreateRequest) UnmarshalBinary(b []byte) error {
	var res TunnelCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
