// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Bucket Bucket
//
// swagger:model Bucket
type Bucket struct {

	// auth
	Auth *BucketAuth `json:"auth,omitempty"`

	// created at
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// If ephemeral is enabled, Webhook Relay will not persist request body, headers or response details
	Ephemeral bool `json:"ephemeral,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// inputs
	// Read Only: true
	Inputs []*Input `json:"inputs"`

	// name
	Name string `json:"name,omitempty"`

	// outputs
	// Read Only: true
	Outputs []*Output `json:"outputs"`

	// Enable/disabled streaming to WebSocket clients from this bucket
	Stream bool `json:"stream,omitempty"`

	// Indicates that webhooks will not be received due to quota limits
	// Read Only: true
	Suspended *bool `json:"suspended,omitempty"`

	// updated at
	// Read Only: true
	UpdatedAt int64 `json:"updated_at,omitempty"`
}

// Validate validates this bucket
func (m *Bucket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bucket) validateAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.Auth) { // not required
		return nil
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *Bucket) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Bucket) validateOutputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Outputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Outputs); i++ {
		if swag.IsZero(m.Outputs[i]) { // not required
			continue
		}

		if m.Outputs[i] != nil {
			if err := m.Outputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Bucket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bucket) UnmarshalBinary(b []byte) error {
	var res Bucket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
