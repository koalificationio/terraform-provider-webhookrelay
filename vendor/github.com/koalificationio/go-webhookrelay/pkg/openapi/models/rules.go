// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Rules Rules
// swagger:model Rules
type Rules struct {

	// and
	And AndRule `json:"and,omitempty"`

	// match
	Match MatchRule `json:"match,omitempty"`

	// not
	Not NotRule `json:"not,omitempty"`

	// or
	Or OrRule `json:"or,omitempty"`
}

// Validate validates this rules
func (m *Rules) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rules) validateAnd(formats strfmt.Registry) error {

	if swag.IsZero(m.And) { // not required
		return nil
	}

	if err := m.And.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("and")
		}
		return err
	}

	return nil
}

func (m *Rules) validateMatch(formats strfmt.Registry) error {

	if swag.IsZero(m.Match) { // not required
		return nil
	}

	if err := m.Match.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("match")
		}
		return err
	}

	return nil
}

func (m *Rules) validateNot(formats strfmt.Registry) error {

	if swag.IsZero(m.Not) { // not required
		return nil
	}

	if err := m.Not.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("not")
		}
		return err
	}

	return nil
}

func (m *Rules) validateOr(formats strfmt.Registry) error {

	if swag.IsZero(m.Or) { // not required
		return nil
	}

	if err := m.Or.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("or")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rules) UnmarshalBinary(b []byte) error {
	var res Rules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
