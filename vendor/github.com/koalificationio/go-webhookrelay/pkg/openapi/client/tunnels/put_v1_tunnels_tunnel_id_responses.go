// Code generated by go-swagger; DO NOT EDIT.

package tunnels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/koalificationio/go-webhookrelay/pkg/openapi/models"
)

// PutV1TunnelsTunnelIDReader is a Reader for the PutV1TunnelsTunnelID structure.
type PutV1TunnelsTunnelIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutV1TunnelsTunnelIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutV1TunnelsTunnelIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutV1TunnelsTunnelIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutV1TunnelsTunnelIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutV1TunnelsTunnelIDOK creates a PutV1TunnelsTunnelIDOK with default headers values
func NewPutV1TunnelsTunnelIDOK() *PutV1TunnelsTunnelIDOK {
	return &PutV1TunnelsTunnelIDOK{}
}

/*PutV1TunnelsTunnelIDOK handles this case with default header values.

Successful Response
*/
type PutV1TunnelsTunnelIDOK struct {
	Payload *models.Tunnel
}

func (o *PutV1TunnelsTunnelIDOK) Error() string {
	return fmt.Sprintf("[PUT /v1/tunnels/{tunnelID}][%d] putV1TunnelsTunnelIdOK  %+v", 200, o.Payload)
}

func (o *PutV1TunnelsTunnelIDOK) GetPayload() *models.Tunnel {
	return o.Payload
}

func (o *PutV1TunnelsTunnelIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tunnel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutV1TunnelsTunnelIDBadRequest creates a PutV1TunnelsTunnelIDBadRequest with default headers values
func NewPutV1TunnelsTunnelIDBadRequest() *PutV1TunnelsTunnelIDBadRequest {
	return &PutV1TunnelsTunnelIDBadRequest{}
}

/*PutV1TunnelsTunnelIDBadRequest handles this case with default header values.

Bad request (check response message)
*/
type PutV1TunnelsTunnelIDBadRequest struct {
}

func (o *PutV1TunnelsTunnelIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/tunnels/{tunnelID}][%d] putV1TunnelsTunnelIdBadRequest ", 400)
}

func (o *PutV1TunnelsTunnelIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutV1TunnelsTunnelIDNotFound creates a PutV1TunnelsTunnelIDNotFound with default headers values
func NewPutV1TunnelsTunnelIDNotFound() *PutV1TunnelsTunnelIDNotFound {
	return &PutV1TunnelsTunnelIDNotFound{}
}

/*PutV1TunnelsTunnelIDNotFound handles this case with default header values.

Tunnel not found
*/
type PutV1TunnelsTunnelIDNotFound struct {
}

func (o *PutV1TunnelsTunnelIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/tunnels/{tunnelID}][%d] putV1TunnelsTunnelIdNotFound ", 404)
}

func (o *PutV1TunnelsTunnelIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
