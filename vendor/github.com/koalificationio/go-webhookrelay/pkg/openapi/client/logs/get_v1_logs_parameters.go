// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetV1LogsParams creates a new GetV1LogsParams object
// with the default values initialized.
func NewGetV1LogsParams() *GetV1LogsParams {
	var ()
	return &GetV1LogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1LogsParamsWithTimeout creates a new GetV1LogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetV1LogsParamsWithTimeout(timeout time.Duration) *GetV1LogsParams {
	var ()
	return &GetV1LogsParams{

		timeout: timeout,
	}
}

// NewGetV1LogsParamsWithContext creates a new GetV1LogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetV1LogsParamsWithContext(ctx context.Context) *GetV1LogsParams {
	var ()
	return &GetV1LogsParams{

		Context: ctx,
	}
}

// NewGetV1LogsParamsWithHTTPClient creates a new GetV1LogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetV1LogsParamsWithHTTPClient(client *http.Client) *GetV1LogsParams {
	var ()
	return &GetV1LogsParams{
		HTTPClient: client,
	}
}

/*GetV1LogsParams contains all the parameters to send to the API endpoint
for the get v1 logs operation typically these are written to a http.Request
*/
type GetV1LogsParams struct {

	/*Bucket
	  Optional bucket ID for filtering logs

	*/
	Bucket *string
	/*From
	  YYYY-MM-DD date from when the logs should be returned, for example '2020-01-01'

	*/
	From *string
	/*Limit
	  Limit of the logs to return

	*/
	Limit *int64
	/*Offset
	  Offset of the logs when querying

	*/
	Offset *int64
	/*Status
	  Webhook log status

	*/
	Status *string
	/*To
	  YYYY-MM-DD last day till when the logs should be returned, for example '2020-01-02' (includes the last day)

	*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get v1 logs params
func (o *GetV1LogsParams) WithTimeout(timeout time.Duration) *GetV1LogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 logs params
func (o *GetV1LogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 logs params
func (o *GetV1LogsParams) WithContext(ctx context.Context) *GetV1LogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 logs params
func (o *GetV1LogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 logs params
func (o *GetV1LogsParams) WithHTTPClient(client *http.Client) *GetV1LogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 logs params
func (o *GetV1LogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBucket adds the bucket to the get v1 logs params
func (o *GetV1LogsParams) WithBucket(bucket *string) *GetV1LogsParams {
	o.SetBucket(bucket)
	return o
}

// SetBucket adds the bucket to the get v1 logs params
func (o *GetV1LogsParams) SetBucket(bucket *string) {
	o.Bucket = bucket
}

// WithFrom adds the from to the get v1 logs params
func (o *GetV1LogsParams) WithFrom(from *string) *GetV1LogsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get v1 logs params
func (o *GetV1LogsParams) SetFrom(from *string) {
	o.From = from
}

// WithLimit adds the limit to the get v1 logs params
func (o *GetV1LogsParams) WithLimit(limit *int64) *GetV1LogsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get v1 logs params
func (o *GetV1LogsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get v1 logs params
func (o *GetV1LogsParams) WithOffset(offset *int64) *GetV1LogsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get v1 logs params
func (o *GetV1LogsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStatus adds the status to the get v1 logs params
func (o *GetV1LogsParams) WithStatus(status *string) *GetV1LogsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get v1 logs params
func (o *GetV1LogsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTo adds the to to the get v1 logs params
func (o *GetV1LogsParams) WithTo(to *string) *GetV1LogsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get v1 logs params
func (o *GetV1LogsParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1LogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Bucket != nil {

		// query param bucket
		var qrBucket string
		if o.Bucket != nil {
			qrBucket = *o.Bucket
		}
		qBucket := qrBucket
		if qBucket != "" {
			if err := r.SetQueryParam("bucket", qBucket); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
