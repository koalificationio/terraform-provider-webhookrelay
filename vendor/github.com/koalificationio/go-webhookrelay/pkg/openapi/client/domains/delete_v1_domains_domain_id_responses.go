// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteV1DomainsDomainIDReader is a Reader for the DeleteV1DomainsDomainID structure.
type DeleteV1DomainsDomainIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteV1DomainsDomainIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteV1DomainsDomainIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteV1DomainsDomainIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteV1DomainsDomainIDPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteV1DomainsDomainIDOK creates a DeleteV1DomainsDomainIDOK with default headers values
func NewDeleteV1DomainsDomainIDOK() *DeleteV1DomainsDomainIDOK {
	return &DeleteV1DomainsDomainIDOK{}
}

/*DeleteV1DomainsDomainIDOK handles this case with default header values.

Successful Response
*/
type DeleteV1DomainsDomainIDOK struct {
}

func (o *DeleteV1DomainsDomainIDOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/domains/{domainID}][%d] deleteV1DomainsDomainIdOK ", 200)
}

func (o *DeleteV1DomainsDomainIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1DomainsDomainIDNotFound creates a DeleteV1DomainsDomainIDNotFound with default headers values
func NewDeleteV1DomainsDomainIDNotFound() *DeleteV1DomainsDomainIDNotFound {
	return &DeleteV1DomainsDomainIDNotFound{}
}

/*DeleteV1DomainsDomainIDNotFound handles this case with default header values.

Domain reservation not found
*/
type DeleteV1DomainsDomainIDNotFound struct {
}

func (o *DeleteV1DomainsDomainIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/domains/{domainID}][%d] deleteV1DomainsDomainIdNotFound ", 404)
}

func (o *DeleteV1DomainsDomainIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteV1DomainsDomainIDPreconditionFailed creates a DeleteV1DomainsDomainIDPreconditionFailed with default headers values
func NewDeleteV1DomainsDomainIDPreconditionFailed() *DeleteV1DomainsDomainIDPreconditionFailed {
	return &DeleteV1DomainsDomainIDPreconditionFailed{}
}

/*DeleteV1DomainsDomainIDPreconditionFailed handles this case with default header values.

Can't delete domain reservation, it's in use by a tunnel or an input with a custom domain
*/
type DeleteV1DomainsDomainIDPreconditionFailed struct {
}

func (o *DeleteV1DomainsDomainIDPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /v1/domains/{domainID}][%d] deleteV1DomainsDomainIdPreconditionFailed ", 412)
}

func (o *DeleteV1DomainsDomainIDPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
