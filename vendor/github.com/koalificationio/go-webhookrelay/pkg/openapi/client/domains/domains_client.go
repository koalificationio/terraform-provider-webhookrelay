// Code generated by go-swagger; DO NOT EDIT.

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1DomainsDomainID(params *DeleteV1DomainsDomainIDParams) (*DeleteV1DomainsDomainIDOK, error)

	GetV1Domains(params *GetV1DomainsParams) (*GetV1DomainsOK, error)

	PostV1Domains(params *PostV1DomainsParams) (*PostV1DomainsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteV1DomainsDomainID deletes a domain reservation
*/
func (a *Client) DeleteV1DomainsDomainID(params *DeleteV1DomainsDomainIDParams) (*DeleteV1DomainsDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1DomainsDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV1DomainsDomainID",
		Method:             "DELETE",
		PathPattern:        "/v1/domains/{domainID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1DomainsDomainIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1DomainsDomainIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1DomainsDomainID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1Domains lists domain reservations
*/
func (a *Client) GetV1Domains(params *GetV1DomainsParams) (*GetV1DomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1DomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1Domains",
		Method:             "GET",
		PathPattern:        "/v1/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1DomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1DomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Domains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV1Domains Reserve a domain
*/
func (a *Client) PostV1Domains(params *PostV1DomainsParams) (*PostV1DomainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1DomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1Domains",
		Method:             "POST",
		PathPattern:        "/v1/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1DomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1DomainsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Domains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
