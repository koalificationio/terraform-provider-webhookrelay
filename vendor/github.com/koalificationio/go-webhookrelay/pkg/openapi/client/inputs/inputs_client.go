// Code generated by go-swagger; DO NOT EDIT.

package inputs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inputs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inputs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1BucketsBucketIDInputsInputID(params *DeleteV1BucketsBucketIDInputsInputIDParams) (*DeleteV1BucketsBucketIDInputsInputIDOK, error)

	PostV1BucketsBucketIDInputs(params *PostV1BucketsBucketIDInputsParams) (*PostV1BucketsBucketIDInputsCreated, error)

	PutV1BucketsBucketIDInputsInputID(params *PutV1BucketsBucketIDInputsInputIDParams) (*PutV1BucketsBucketIDInputsInputIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteV1BucketsBucketIDInputsInputID deletes input

  Delete input. Once input is deleted, you will not be able to recreate a new input with the same ID.
*/
func (a *Client) DeleteV1BucketsBucketIDInputsInputID(params *DeleteV1BucketsBucketIDInputsInputIDParams) (*DeleteV1BucketsBucketIDInputsInputIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1BucketsBucketIDInputsInputIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV1BucketsBucketIDInputsInputID",
		Method:             "DELETE",
		PathPattern:        "/v1/buckets/{bucketID}/inputs/{inputID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1BucketsBucketIDInputsInputIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1BucketsBucketIDInputsInputIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1BucketsBucketIDInputsInputID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostV1BucketsBucketIDInputs creates a new input

  Create one or more inputs for the bucket to get unique public endpoints.
*/
func (a *Client) PostV1BucketsBucketIDInputs(params *PostV1BucketsBucketIDInputsParams) (*PostV1BucketsBucketIDInputsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1BucketsBucketIDInputsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostV1BucketsBucketIDInputs",
		Method:             "POST",
		PathPattern:        "/v1/buckets/{bucketID}/inputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1BucketsBucketIDInputsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1BucketsBucketIDInputsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1BucketsBucketIDInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutV1BucketsBucketIDInputsInputID updates input

  Update input endpoint response code, body or headers.
*/
func (a *Client) PutV1BucketsBucketIDInputsInputID(params *PutV1BucketsBucketIDInputsInputIDParams) (*PutV1BucketsBucketIDInputsInputIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1BucketsBucketIDInputsInputIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV1BucketsBucketIDInputsInputID",
		Method:             "PUT",
		PathPattern:        "/v1/buckets/{bucketID}/inputs/{inputID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV1BucketsBucketIDInputsInputIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1BucketsBucketIDInputsInputIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV1BucketsBucketIDInputsInputID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
